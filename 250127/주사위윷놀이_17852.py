"""
 * 소요시간: 4 시간
 * 시간복잡도: O(n) 	
 * 메모리: 39268 kb	
 * 시간: 396 ms
"""

# 주사위 입력 받기
dices = list(map(int, input().split()))
max_score = 0
horse_pos = [0] * 4

# 각 위치에서 다음 이동 가능한 위치 포함해서
# 전체 이동가능한 방향을 모두 적어보았습니다
# 도착 그 이후는 -1로 표시해서 예외 사항을 만들었습니다..
board = [
    (0, 1, 2, 3, 4, 5),
    (2, 2, 3, 4, 5, 6),
    (4, 3, 4, 5, 6, 7),
    (6, 4, 5, 6, 7, 8),
    (8, 5, 6, 7, 8, 9),
    (10, 21, 22, 23, 29, 30),
    (12, 7, 8, 9, 10, 11),
    (14, 8, 9, 10, 11, 12),
    (16, 9, 10, 11, 12, 13),
    (18, 10, 11, 12, 13, 14),
    (20, 24, 25, 29, 30, 31),
    (24, 13, 14, 15, 16, 17),
    (26, 14, 15, 16, 17, 18),
    (28, 15, 16, 17, 18, 19),
    (30, 26, 27, 28, 29, 30),
    (32, 17, 18, 19, 20, -1),
    (34, 18, 19, 20, -1, -1),
    (36, 19, 20, -1, -1, -1),
    (38, 20, -1, -1, -1, -1),
    (40, -1, -1, -1, -1, -1),
    (13, 22, 23, 29, 30, 31),
    (16, 23, 29, 30, 31, 20),
    (19, 29, 30, 31, 20, -1),
    (22, 25, 29, 30, 31, 20),
    (24, 29, 30, 31, 20, -1),
    (28, 27, 28, 29, 30, 31),
    (27, 28, 29, 30, 31, 20),
    (26, 29, 30, 31, 20, -1),
    (25, 30, 31, 20, -1, -1),
    (30, 31, 20, -1, -1, -1),
    (35, 20, -1, -1, -1, -1),
    (0, -1, -1, -1, -1, -1),
]


def find_path(turn, score):
    global max_score

    # 10턴이 끝났을 경우 최댓값 갱신 후 종료하기
    if turn == 10:
        max_score = max(max_score, score)
        return

    # 현재 턴에서 이미 이동한 위치 저장하기 위한 visited 추가
    visited = set()

    # 4개의 말을 차례대로 선택해가며 경로 탐색
    for i in range(4):
        pos = horse_pos[i]

        # 도착하지 않은 말 중 현재 위치에 없는 경우에만 이동할 수 있음
        if pos != -1 and pos not in visited:
            visited.add(pos)

            # 주사위 값만큼 이동한 후 다음 위치 구하기
            next_pos = board[pos][dices[turn]]

            # 이동할 위치가 도착 칸(-1) 이거나, 다른 말과 겹치지 않는 경우에는
            if next_pos == -1 or next_pos not in horse_pos:
                # 말을 이동하고 다음 턴 진행하기
                horse_pos[i] = next_pos
                find_path(turn + 1, score + board[next_pos][0])

                # 아니면 이전 상태로 돌아가서 다시 탐색하도록 초기화
                horse_pos[i] = pos


find_path(0, 0)
print(max_score)
